var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./core-959e0048.system.js'], function (exports) {
    'use strict';
    var BUILD, getElement, registerInstance, h;
    return {
        setters: [function (module) {
                BUILD = module.B;
                getElement = module.c;
                registerInstance = module.r;
                h = module.h;
            }],
        execute: function () {
            /**
             * Call this function as soon as the element is inside the viewport.
             * @param margin Optionally provide the padding (rootMargin) for IntersectionObserver. Determines how far from the viewport lazy loading starts. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left). The values can be percentages
             * @example
            ```
            @Lazy()
            lazyCallback() {
              // this will run when element is inside the viewport.
            }
            ```
             * @example
            ```
            @Lazy({margin: "100px"})
            lazyCallback() {
              // this will run when element is 100px from the viewport.
            }
            ```
             */
            function Lazy(options) {
                return function (proto, methodName) {
                    // this is to resolve the 'compiler optimization issue':
                    // lifecycle events not being called when not explicitly declared in at least one of components from bundle
                    BUILD.cmpDidLoad = true;
                    var componentDidLoad = proto.componentDidLoad;
                    proto.componentDidLoad = function () {
                        var host = getElement(this);
                        var method = this[methodName];
                        var margin = options ? options.margin : "";
                        registerLazy(this, host, method, margin);
                        return componentDidLoad && componentDidLoad.call(this);
                    };
                };
            }
            /**
             * Register callback function for HTMLElement to be executed when the element is inside the viewport.
             *
             */
            function registerLazy(component, element, callback, marginProp) {
                if ("IntersectionObserver" in window) {
                    var margin = getValidMargin(marginProp);
                    if (!margin) {
                        throw new Error("@Lazy() decorator's optional parameter 'margin' is given but not valid. It should be a string like CSS margin property, e.g. '10px 20px 30px 40px'(top, right, bottom, left) or just '10px' (all). The values can be percentages ");
                    }
                    var io_1 = new IntersectionObserver(function (data) {
                        if (data[0].isIntersecting) {
                            callback.call(component);
                            io_1.disconnect();
                            io_1 = null;
                        }
                    }, { rootMargin: margin });
                    io_1.observe(element);
                }
                else {
                    // fall back to setTimeout for Safari and IE
                    setTimeout(function () {
                        callback.call(component);
                    }, 300);
                }
            }
            /**
             * Checs if margin has values like CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left). The values can be percentages.
             * For empty input string it returns default value '0px'. For not valid input it returns null.
             * @param margin Determines how far from the viewport lazy loading starts
             */
            function getValidMargin(margin) {
                var regexp = RegExp(/^(-?\d*\.?\d+)(px|%)$/);
                var marginString = margin || "0px";
                return marginString.split(/\s+/).every(function (margin) { return regexp.test(margin); })
                    ? marginString
                    : null;
            }
            var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var LazyComponent = exports('lazy_component', /** @class */ (function () {
                function class_1(hostRef) {
                    var _this = this;
                    registerInstance(this, hostRef);
                    this.onIntersection = function (entries) { return __awaiter(_this, void 0, void 0, function () {
                        var _i, entries_1, entry;
                        return __generator(this, function (_a) {
                            for (_i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                                entry = entries_1[_i];
                                if (entry.isIntersecting) {
                                    if (this.observer) {
                                        this.observer.disconnect();
                                    }
                                    if (entry.target.getAttribute('data-src')) {
                                        entry.target.setAttribute('src', entry.target.getAttribute('data-src'));
                                        entry.target.removeAttribute('data-src');
                                    }
                                }
                            }
                            return [2 /*return*/];
                        });
                    }); };
                }
                class_1.prototype.componentDidLoad = function () {
                    var img = this.el.shadowRoot.querySelector('img');
                    if (img) {
                        this.observer = new IntersectionObserver(this.onIntersection);
                        this.observer.observe(img);
                    }
                };
                class_1.prototype.render = function () {
                    return (h("img", { "data-src": this.imgSrc }));
                };
                Object.defineProperty(class_1.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:lazy-component"; },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }()));
            __decorate([
                Lazy()
            ], LazyComponent.prototype, "onIntersection", void 0);
        }
    };
});
