import { registerInstance as __stencil_registerInstance, getElement as __stencil_getElement } from "@stencil/core";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { h } from "@stencil/core";
export const LazyComponent = class {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.onIntersection = async (entries) => {
            for (const entry of entries) {
                if (entry.isIntersecting) {
                    if (this.observer) {
                        this.observer.disconnect();
                    }
                    if (entry.target.getAttribute('data-src')) {
                        entry.target.setAttribute('src', entry.target.getAttribute('data-src'));
                        entry.target.removeAttribute('data-src');
                    }
                }
            }
        };
    }
    componentDidLoad() {
        const img = this.el.shadowRoot.querySelector('img');
        if (img) {
            this.observer = new IntersectionObserver(this.onIntersection);
            this.observer.observe(img);
        }
    }
    render() {
        return (h("img", { "data-src": this.imgSrc }));
    }
    get el() { return __stencil_getElement(this); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:lazy-component"; }
};
__decorate([
    Lazy()
], LazyComponent.prototype, "onIntersection", void 0);
